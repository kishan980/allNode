"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const WithdrawAPI_1 = require("./WithdrawAPI");
describe('WithdrawAPI', () => {
    const currency = 'BTC';
    const cryptoAddress = '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa';
    const expectedFeeEstimate = { fee: '.01' };
    const withdrawalId = 'fake-withdrawal-id-abcd-01234';
    afterAll(() => nock_1.default.cleanAll());
    beforeAll(() => {
        nock_1.default(global.REST_URL)
            .persist()
            .post(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.CRYPTO)
            .reply((_uri, body) => {
            const withdrawal = typeof body === 'string' ? JSON.parse(body) : body;
            const response = {
                amount: withdrawal.amount,
                currency: withdrawal.currency,
                id: withdrawalId,
            };
            return [200, JSON.stringify(response)];
        })
            .get(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.FEE_ESTIMATE)
            .query({ crypto_address: cryptoAddress, currency })
            .reply(200, JSON.stringify(expectedFeeEstimate));
    });
    describe('postCryptoWithdrawal', () => {
        const amount = 1.23;
        const destinationTag = 'satoshi-nakamoto';
        it('creates a new withdrawal to crypto address', () => __awaiter(void 0, void 0, void 0, function* () {
            const withdrawal = yield global.client.rest.withdraw.postCryptoWithdrawal(amount, currency, cryptoAddress);
            expect(withdrawal).toEqual({ amount, currency, id: withdrawalId });
        }));
        it('creates a new withdrawal to crypto address (with destination tag)', () => __awaiter(void 0, void 0, void 0, function* () {
            const withdrawal = yield global.client.rest.withdraw.postCryptoWithdrawal(amount, currency, cryptoAddress, destinationTag);
            expect(withdrawal).toEqual({ amount, currency, id: withdrawalId });
        }));
    });
    describe('getFeeEstimate', () => {
        it('gets a fee estimate', () => __awaiter(void 0, void 0, void 0, function* () {
            const estimate = yield global.client.rest.withdraw.getFeeEstimate(currency, cryptoAddress);
            expect(estimate).toEqual(expectedFeeEstimate);
        }));
    });
});
//# sourceMappingURL=WithdrawAPI.test.js.map